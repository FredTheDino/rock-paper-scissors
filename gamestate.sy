use input
use assets
use gfx
use collision
from love use love

bool_to_int :: pu x: bool -> float
    if x do
        1.0
    else
        0.0
    end
end

ButtonState :: enum
    Up int
    Down int
end

PlayerInput :: blob {
    move: float,
    jump: ButtonState,
    shoot: ButtonState,
}

is_up :: pu x -> bool
    case x do
        Up _ -> true end
        Down _ -> false end
    end
end

is_down :: pu x -> bool
    not is_up(x)
end

pressed :: pu x, frame -> bool
    is_down(x) and get_frame(x) == frame
end

get_frame :: pu x -> int
    case x do
        Up n -> n end
        Down n -> n end
    end
end

held :: pu x, frame, diff -> bool
    is_down(x) and ((get_frame(x) + diff) >= frame)
end

player_size :: (20.0, 20.0)

Bullet :: blob {
    owner: int,
    lifetime: float,

    original_dir: (float, float),
    pos: (float, float),
    vel: (float, float),
}

update_bullet :: fn bullet, delta do
    bullet.lifetime += delta
    bullet.pos += bullet.vel

    if 0.1 < bullet.lifetime and bullet.lifetime < 2.0 do
        bullet.vel -= bullet.original_dir * (8.0, 8.0) * (delta, delta)
    end
end

draw_bullet :: fn bullet do
    color :: id_to_color' bullet.owner
    assets.banana.drawTintedCentered(color, bullet.pos, bullet.lifetime * 10.0, (0.1, 0.1))
    gfx.drawRectCenteredOutline(color, bullet.pos, (10.0, 10.0))
end

Player :: blob {
    id: int,
    pos: (float, float),
    vel: (float, float),
    size: (float, float),
    grounded: bool,

    bullets: [Bullet],

    input: PlayerInput,
}

new_player :: pu id: int ->
    Player {
        id: id,
        pos: (as_float(id) * 40.0, -40.0),
        vel: (0.0, 0.0),
        size: (1.0, 1.0),
        grounded: true,

        bullets: [],

        input: PlayerInput {
            move: 0.0,
            jump: ButtonState.Up 0,
            shoot: ButtonState.Up 0,
        }
    }
end

read_input :: fn inp, left, right, jump, shoot, grounded, frame do
    inp.move = (
        bool_to_int(input.isKeyDown(right))
        - bool_to_int(input.isKeyDown(left))
    )

    if input.isKeyDown(jump) and is_up(inp.jump) and grounded do
        inp.jump = ButtonState.Down frame
    end
    if not input.isKeyDown(jump) and not is_up(inp.jump) do
        inp.jump = ButtonState.Up frame
    end

    if input.isKeyDown(shoot) and is_up(inp.shoot) do
        inp.shoot = ButtonState.Down frame
    end
    if not input.isKeyDown(shoot) and not is_up(inp.shoot) do
        inp.shoot = ButtonState.Up frame
    end
end

update_player :: fn player, aim_dir, frame, delta do
    jump_force :: 400.0
    hover_force :: 1200.0
    move_force :: 1000.0
    gravity :: 3000.0

    player.vel += (player.input.move * move_force * delta, 0.0)
    if abs(player.input.move) > 0.1 do
        player.vel = (player.vel[0] * pow(0.01, delta), player.vel[1])
    else
        player.vel = (player.vel[0] * pow(0.0001, delta), player.vel[1])
    end

    if pressed(player.input.jump, frame) do
        player.vel += (0.0, -jump_force)
    elif held(player.input.jump, frame, 20) do
        player.vel += (0.0, -hover_force * delta)
    end
    player.vel += (0.0, gravity * delta)

    if pressed(player.input.shoot, frame) do
        offset :: 4.0
        vel :: 5.0
        player.bullets -> list.push(
            Bullet {
                owner: player.id,
                lifetime: 0.0,

                original_dir: aim_dir,
                pos: player.pos + aim_dir * (offset, offset),
                vel: aim_dir * (vel, vel),

            }
        )
    end

    player.bullets -> for_each' fn bullet do
        update_bullet' bullet, delta
    end

    player.pos += player.vel * (delta, delta)

    floor :: 400.0
    if player.pos[1] >= floor do
        player.pos = (player.pos[0], floor)
        player.vel = (player.vel[0], min(0.0, player.vel[1]))
    end
end

id_to_color :: pu id ->
    if id == 0 do
        gfx.rgba(1.0, 0.2, 0.2, 0.5)
    else
        gfx.rgba(0.2, 0.8, 0.8, 0.5)
    end
end

draw_player :: fn player do
    color :: id_to_color' player.id
    gfx.drawRectCentered' color, player.pos, player_size

    player.bullets -> for_each' draw_bullet
end

// GS
GameState :: enum
    Playing
    Menu
end

State :: blob {
    current_state: GameState,
    frame: int,

    player_a: Player,
    player_b: Player,
}

new :: fn ->
    State {
        current_state: GameState.Playing,
        frame: 0,

        player_a: new_player(0),
        player_b: new_player(1),
    }
end

update :: fn state: State, delta: float -> State
    case state.current_state do
        Playing ->
            read_input( state.player_a.input
                      , input.Key.A, input.Key.D
                      , input.Key.W, input.Key.S
                      , state.player_a.grounded, state.frame )

            read_input( state.player_b.input
                      , input.Key.Left, input.Key.Right
                      , input.Key.Up, input.Key.Down
                      , state.player_b.grounded, state.frame )

            aim :: math.normalize(state.player_a.pos - state.player_b.pos)
            update_player(state.player_a, aim, state.frame, delta)
            aim :: math.normalize(state.player_b.pos - state.player_a.pos)
            update_player(state.player_b, aim, state.frame, delta)

           state.player_a.grounded = false
            state.player_b.grounded = false
            ground -> for_each' fn g do
                collision_with_player(state.player_a, g)
                collision_with_player(state.player_b, g)
            end
            platform -> for_each' fn g do
                collision_with_player_platform(state.player_a, g)
                collision_with_player_platform(state.player_b, g)
            end
        end
        Menu ->
            if input.isKeyDown' input.Key.B do
                state.current_state = GameState.Playing
            end
        end
    end
    state.frame += 1


    state
end

follow_players :: fn state do
    gfx.reset_camera()

    center :: (state.player_a.pos + state.player_b.pos) * (-0.5, -0.5)
    half_screen :: (love.graphics.getWidth() / 2, love.graphics.getHeight() / 2)
    gfx.move_camera' center + half_screen
end

ground :: [
    ((0.0, 0.0), (100.0, 20.0)),
    ((0.0, 20.0), (600.0, 20.0)),
    ((0.0, 20.0), (600.0, 20.0)),
    ((300.0, 10.0), (100.0, 40.0)),
    ((-300.0, 10.0), (100.0, 40.0)),

    ((-370.0, -180.0), (40.0, 400.0)),
    ((370.0, -180.0), (40.0, 400.0)),
]

platform :: [
    ((150.0, -30.0), (100.0, 10.0)),
    ((-150.0, -30.0), (100.0, 10.0)),
]


collision_with_player :: fn player, object do
    dim :: collision.box_vs_box(player.pos, player_size, object[0], object[1])
    if dim[0] != 0.0 or dim[1] != 0.0 do
        player.pos -= dim

        dv :: if dim[0] != 0.0 do
            (player.vel[0], 0.0)
        elif dim[1] != 0.0 do
            (0.0, player.vel[1])
        else do
            (0.0, 0.0)
        end
        player.vel -= dv

        if dim[1] > 0 do
            player.grounded = true
        end
    end
end

collision_with_player_platform :: fn player, object do
    dim :: collision.box_vs_box(player.pos, player_size, object[0], object[1])
    if dim[0] == 0.0 and dim[1] > 0.0 and player.vel[1] >= 0.0 do
        player.pos -= dim

        dv :: if dim[0] != 0.0 do
            (player.vel[0], 0.0)
        else
            (0.0, player.vel[1])
        end
        player.vel -= dv

        if dim[1] > 0 do
            player.grounded = true
        end
    end
end


draw_object :: fn object, color do
    gfx.drawRectCentered' color, object[0], object[1]
end

draw :: fn state: State do
    case state.current_state do
        Playing ->
            follow_players' state

            draw_player(state.player_a)
            draw_player(state.player_b)

            ground -> for_each' fn g do
                draw_object(g, gfx.rgba(1.0, 1.0, 1.0, 1.0))
            end

            platform -> for_each' fn g do
                draw_object(g, gfx.rgba(1.0, 1.0, 1.0, 0.5))
            end
        end
        Menu ->
        end
    end
end

